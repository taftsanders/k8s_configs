#helm repo add adwerx https://adwerx.github.io/charts
#helm install awx adwerx/awx
---
# Source: awx/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "awx2-test-connection"
  labels:
    app.kubernetes.io/name: awx
    helm.sh/chart: awx-2.1.0
    app.kubernetes.io/instance: awx2
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['awx2:8080']
  restartPolicy: Never
MANIFEST:
---
# Source: awx/charts/memcached/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: awx2-memcached
  labels:
    app: awx2-memcached
    chart: "memcached-2.9.0"
    release: "awx2"
    heritage: "Helm"
spec:
  selector:
    matchLabels:
      app: awx2-memcached
      chart: "memcached-2.9.0"
      release: "awx2"
      heritage: "Helm"
  minAvailable: 2
---
# Source: awx/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: awx2-postgresql
  labels:
    app: postgresql
    chart: postgresql-6.3.2
    release: "awx2"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "cGdwYXNzd29yZA=="
---
# Source: awx/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: awx2-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-6.4.2
    release: "awx2"
    heritage: "Helm"
type: Opaque
data:
  
  rabbitmq-password: "YW1xcGFzc3dvcmQ="
  
  
  rabbitmq-erlang-cookie: "MGIyUkFNc2c5S0FOeWVYUE9jS0xoOVFqNlRRV3NBM2g="
---
# Source: awx/templates/confd-secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: awx2-confd
  labels:
    app.kubernetes.io/name: awx
    helm.sh/chart: awx-2.1.0
    app.kubernetes.io/instance: awx2
    app.kubernetes.io/managed-by: Helm
data:
  credentials.py: "REFUQUJBU0VTID0gewogICAgJ2RlZmF1bHQnOiB7CiAgICAgICAgJ0FUT01JQ19SRVFVRVNUUyc6IFRydWUsCiAgICAgICAgJ0VOR0lORSc6ICdhd3gubWFpbi5kYi5wcm9maWxlZF9wZycsCiAgICAgICAgJ05BTUUnOiAiYXd4IiwKICAgICAgICAnVVNFUic6ICJhd3giLAogICAgICAgICdQQVNTV09SRCc6ICJwZ3Bhc3N3b3JkIiwKICAgICAgICAnSE9TVCc6ICJhd3gyLXBvc3RncmVzcWwiLAogICAgICAgICdQT1JUJzogIjU0MzIiLAogICAgfQp9CkJST0tFUl9VUkwgPSAnYW1xcDovL3t9Ont9QHt9Ont9L3t9Jy5mb3JtYXQoCiAgICAiYWRtaW4iLAogICAgImFtcXBhc3N3b3JkIiwKICAgICJhd3gyLXJhYmJpdG1xIiwKICAgICI1NjcyIiwKICAgICJhd3giKQpDSEFOTkVMX0xBWUVSUyA9IHsKICAgICdkZWZhdWx0JzogeydCQUNLRU5EJzogJ2FzZ2lfYW1xcC5BTVFQQ2hhbm5lbExheWVyJywKICAgICAgICAgICAgICAgICdST1VUSU5HJzogJ2F3eC5tYWluLnJvdXRpbmcuY2hhbm5lbF9yb3V0aW5nJywKICAgICAgICAgICAgICAgICdDT05GSUcnOiB7J3VybCc6IEJST0tFUl9VUkx9fQp9Cg=="
  environment.sh: "REFUQUJBU0VfVVNFUj1hd3gKREFUQUJBU0VfTkFNRT1hd3gKREFUQUJBU0VfSE9TVD1hd3gyLXBvc3RncmVzcWwKREFUQUJBU0VfUE9SVD01NDMyCkRBVEFCQVNFX1BBU1NXT1JEPXBncGFzc3dvcmQKREFUQUJBU0VfQURNSU5fUEFTU1dPUkQ9cGdwYXNzd29yZApNRU1DQUNIRURfSE9TVD1hd3gyLW1lbWNhY2hlZApNRU1DQUNIRURfUE9SVD0xMTIxMQpSQUJCSVRNUV9IT1NUPWF3eDItcmFiYml0bXEKUkFCQklUTVFfUE9SVD01NjcyCkFXWF9BRE1JTl9VU0VSPWFkbWluCkFXWF9BRE1JTl9QQVNTV09SRD1wYXNzd29yZAo="
---
# Source: awx/templates/secret-key-secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: awx2-secret-key
  labels:
    app.kubernetes.io/name: awx
    helm.sh/chart: awx-2.1.0
    app.kubernetes.io/instance: awx2
    app.kubernetes.io/managed-by: Helm
data:
  SECRET_KEY: "YXd4c2VjcmV0"
---
# Source: awx/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: awx2-rabbitmq-config
  labels:
    app: rabbitmq
    chart: rabbitmq-6.4.2
    release: "awx2"
    heritage: "Helm"
data:
  enabled_plugins: |-
    [rabbitmq_management, rabbitmq_peer_discovery_k8s].
  rabbitmq.conf: |-
    ##username and password
    default_user=admin
    default_pass=CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator=min-masters
    # enable guest user
    loopback_users.guest = false
    default_vhost = awx
---
# Source: awx/templates/settings-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: awx2-settings
  labels:
    app.kubernetes.io/name: awx
    helm.sh/chart: awx-2.1.0
    app.kubernetes.io/instance: awx2
    app.kubernetes.io/managed-by: Helm
data:
  settings.py: |
    import os
    import socket
    ADMINS = ()

    AWX_PROOT_ENABLED = True

    # Automatically deprovision pods that go offline
    AWX_AUTO_DEPROVISION_INSTANCES = True

    # SYSTEM_TASK_ABS_CPU =
    # SYSTEM_TASK_ABS_MEM =

    # Autoprovisioning should replace this
    CLUSTER_HOST_ID = socket.gethostname()
    SYSTEM_UUID = '00000000-0000-0000-0000-000000000000'

    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

    REMOTE_HOST_HEADERS = ['HTTP_X_FORWARDED_FOR']

    STATIC_ROOT = '/var/lib/awx/public/static'
    PROJECTS_ROOT = '/var/lib/awx/projects'
    JOBOUTPUT_ROOT = '/var/lib/awx/job_status'
    SECRET_KEY = open('/etc/tower/SECRET_KEY', 'rb').read().strip()
    ALLOWED_HOSTS = ['*']
    INTERNAL_API_URL = 'http://127.0.0.1:8052'
    SERVER_EMAIL = 'root@localhost'
    DEFAULT_FROM_EMAIL = 'webmaster@localhost'
    EMAIL_SUBJECT_PREFIX = '[AWX] '
    EMAIL_HOST = 'localhost'
    EMAIL_PORT = 25
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    EMAIL_USE_TLS = False

    LOGGING['handlers']['console'] = {
        '()': 'logging.StreamHandler',
        'level': 'DEBUG',
        'formatter': 'simple',
    }

    LOGGING['loggers']['django.request']['handlers'] = ['console']
    LOGGING['loggers']['rest_framework.request']['handlers'] = ['console']
    LOGGING['loggers']['awx']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.commands.run_callback_receiver']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.commands.inventory_import']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.tasks']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.scheduler']['handlers'] = ['console']
    LOGGING['loggers']['django_auth_ldap']['handlers'] = ['console']
    LOGGING['loggers']['social']['handlers'] = ['console']
    LOGGING['loggers']['system_tracking_migrations']['handlers'] = ['console']
    LOGGING['loggers']['rbac_migrations']['handlers'] = ['console']
    LOGGING['loggers']['awx.isolated.manager.playbooks']['handlers'] = ['console']
    LOGGING['handlers']['callback_receiver'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['task_system'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['tower_warnings'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['rbac_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['system_tracking_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['management_playbooks'] = {'class': 'logging.NullHandler'}

    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
            'LOCATION': '{}:{}'.format("awx2-memcached", "11211")
        },
        'ephemeral': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        },
    }

    USE_X_FORWARDED_PORT = True

    # INSIGHTS_URL_BASE = "https://example.org"
---
# Source: awx/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: awx2-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-6.4.2
    release: "awx2"
    heritage: "Helm"
---
# Source: awx/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: awx2-rabbitmq-endpoint-reader
  labels:
    app: rabbitmq
    chart: rabbitmq-6.4.2
    release: "awx2"
    heritage: "Helm"
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
---
# Source: awx/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: awx2-rabbitmq-endpoint-reader
  labels:
    app: rabbitmq
    chart: rabbitmq-6.4.2
    release: "awx2"
    heritage: "Helm"
subjects:
- kind: ServiceAccount
  name: awx2-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: awx2-rabbitmq-endpoint-reader
---
# Source: awx/charts/memcached/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: awx2-memcached
  labels:
    app: awx2-memcached
    chart: "memcached-2.9.0"
    release: "awx2"
    heritage: "Helm"
  annotations:
    {}
spec:
  clusterIP: None
  ports:
  - name: memcache
    port: 11211
    targetPort: memcache
  selector:
    app: awx2-memcached
---
# Source: awx/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: awx2-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-6.3.2
    release: "awx2"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "awx2"
---
# Source: awx/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: awx2-postgresql
  labels:
    app: postgresql
    chart: postgresql-6.3.2
    release: "awx2"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "awx2"
    role: master
---
# Source: awx/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: awx2-rabbitmq-headless
  labels:
    app: rabbitmq
    chart: rabbitmq-6.4.2
    release: "awx2"
    heritage: "Helm"
spec:
  clusterIP: None
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
  - name: amqp
    port: 5672
    targetPort: amqp
  - name: dist
    port: 25672
    targetPort: dist
  - name: stats
    port: 15672
    targetPort: stats
  selector:
    app: rabbitmq
    release: "awx2"
---
# Source: awx/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: awx2-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-6.4.2
    release: "awx2"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
  - name: amqp
    port: 5672
    targetPort: amqp
  - name: dist
    port: 25672
    targetPort: dist
  - name: stats
    port: 15672
    targetPort: stats
  selector:
    app: rabbitmq
    release: "awx2"
---
# Source: awx/templates/web-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: awx2
  labels:
    app.kubernetes.io/name: awx
    helm.sh/chart: awx-2.1.0
    app.kubernetes.io/instance: awx2
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: awx-web
    app.kubernetes.io/instance: awx2
---
# Source: awx/templates/task-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: awx2-task
  labels:
    app.kubernetes.io/name: awx-task
    helm.sh/chart: awx-2.1.0
    app.kubernetes.io/instance: awx2
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: awx-task
      app.kubernetes.io/instance: awx2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: awx-task
        app.kubernetes.io/instance: awx2
    spec:
      containers:
        - name: awx
          image: "ansible/awx_task:8.0.0"
          imagePullPolicy: IfNotPresent
          command:
            - /usr/bin/launch_awx_task.sh
          volumeMounts:
            - name: settings
              mountPath: "/etc/tower/settings.py"
              subPath: settings.py
              readOnly: true
            - name: confd
              mountPath: "/etc/tower/conf.d/"
              readOnly: true
            - name: secret-key
              mountPath: "/etc/tower/SECRET_KEY"
              subPath: SECRET_KEY
              readOnly: true
          resources:
            {}
      volumes:
        - name: settings
          configMap:
            name: awx2-settings
            items:
              - key: settings.py
                path: settings.py
        - name: secret-key
          secret:
            secretName: awx2-secret-key
            items:
              - key: SECRET_KEY
                path: SECRET_KEY
        - name: confd
          secret:
            secretName: awx2-confd
---
# Source: awx/templates/web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: awx2-web
  labels:
    app.kubernetes.io/name: awx-web
    helm.sh/chart: awx-2.1.0
    app.kubernetes.io/instance: awx2
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: awx-web
      app.kubernetes.io/instance: awx2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: awx-web
        app.kubernetes.io/instance: awx2
    spec:
      containers:
        - name: awx
          image: "ansible/awx_web:8.0.0"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8052
              name: http
          # livenessProbe:
          #   initialDelaySeconds: 5
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   initialDelaySeconds: 10
          #   httpGet:
          #     path: /
          #     port: http
          volumeMounts:
            - name: settings
              mountPath: "/etc/tower/settings.py"
              subPath: settings.py
              readOnly: true
            - name: confd
              mountPath: "/etc/tower/conf.d/"
              readOnly: true
            - name: secret-key
              mountPath: "/etc/tower/SECRET_KEY"
              subPath: SECRET_KEY
              readOnly: true
          resources:
            {}
      volumes:
        - name: settings
          configMap:
            name: awx2-settings
            items:
              - key: settings.py
                path: settings.py
        - name: secret-key
          secret:
            secretName: awx2-secret-key
            items:
              - key: SECRET_KEY
                path: SECRET_KEY
        - name: confd
          secret:
            secretName: awx2-confd
---
# Source: awx/charts/memcached/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: awx2-memcached
  labels:
    app: awx2-memcached
    chart: "memcached-2.9.0"
    release: "awx2"
    heritage: "Helm"
spec:
  serviceName: awx2-memcached
  replicas: 3
  selector:
    matchLabels:
      app: awx2-memcached
      release: "awx2"
  template:
    metadata:
      labels:
        app: awx2-memcached
        chart: "memcached-2.9.0"
        release: "awx2"
        heritage: "Helm"
    spec:
      securityContext:
        fsGroup: 1001
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app:  awx2-memcached
                release: "awx2"
      containers:
      - name: awx2-memcached
        image: memcached:1.5.12-alpine
        imagePullPolicy: ""
        securityContext:
          runAsUser: 1001
        command:
        - memcached
        - -m 64
        - -o
        - modern
        - -v
        ports:
        - name: memcache
          containerPort: 11211
        livenessProbe:
          tcpSocket:
            port: memcache
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: memcache
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
---
# Source: awx/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: awx2-postgresql
  labels:
    app: postgresql
    chart: postgresql-6.3.2
    release: "awx2"
    heritage: "Helm"
spec:
  serviceName: awx2-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "awx2"
      role: master
  template:
    metadata:
      name: awx2-postgresql
      labels:
        app: postgresql
        chart: postgresql-6.3.2
        release: "awx2"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
      - name: init-chmod-data
        image: docker.io/bitnami/minideb:latest
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        command:
          - sh
          - -c
          - |
            mkdir -p /bitnami/postgresql/data
            chmod 700 /bitnami/postgresql/data
            find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
              xargs chown -R 1001:1001
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      containers:
      - name: awx2-postgresql
        image: docker.io/bitnami/postgresql:9.6
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: "/bitnami/postgresql"
        - name: PGDATA
          value: "/bitnami/postgresql/data"
        - name: POSTGRES_USER
          value: "awx"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: awx2-postgresql
              key: postgresql-password
        - name: POSTGRES_DB
          value: "awx"
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "awx" -d "awx" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              pg_isready -U "awx" -d "awx" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: awx/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: awx2-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-6.4.2
    release: "awx2"
    heritage: "Helm"
spec:
  serviceName: awx2-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: rabbitmq
      release: "awx2"
  template:
    metadata:
      labels:
        app: rabbitmq
        release: "awx2"
        chart: rabbitmq-6.4.2
    spec:      
      serviceAccountName: awx2-rabbitmq
      terminationGracePeriodSeconds: 10
      containers:
      - name: rabbitmq
        image: docker.io/bitnami/rabbitmq:3.7.17-debian-9-r0
        imagePullPolicy: "IfNotPresent"
        command:
         - bash
         - -ec
         - |
            mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/
            mkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/
            touch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
            #persist the erlang cookie in both places for server and cli tools
            echo $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
            cp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/
            #change permission so only the user has access to the cookie file
            chmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
            #copy the mounted configuration to both places
            cp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq
            # Apply resources limits
            ulimit -n "${RABBITMQ_ULIMIT_NOFILES}"
            #replace the default password that is generated
            sed -i "/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\/\\\\}" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf
            #api check for probes
            cat > /opt/bitnami/rabbitmq/sbin/rabbitmq-api-check <<EOF
            #!/bin/sh
            set -e
            URL=\$1
            EXPECTED=\$2
            ACTUAL=\$(curl --silent --show-error --fail "\${URL}")
            echo "\${ACTUAL}"
            test "\${EXPECTED}" = "\${ACTUAL}"
            EOF
            chmod a+x /opt/bitnami/rabbitmq/sbin/rabbitmq-api-check
            #health check for probes, handle period during rabbtmq sync
            cat > /opt/bitnami/rabbitmq/sbin/rabbitmq-health-check <<EOF
            #!/bin/sh
            START_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
            if [ -f \${START_FLAG} ]; then
               rabbitmqctl node_health_check
               RESULT=\$?
               if [ \$RESULT -ne 0 ]; then
                  rabbitmqctl status
                  exit $?
               fi
               rm -f \${START_FLAG}
               exit \${RESULT}
            fi
            rabbitmq-api-check \$1 \$2
            EOF
            chmod a+x /opt/bitnami/rabbitmq/sbin/rabbitmq-health-check
            exec rabbitmq-server
        volumeMounts:
          - name: config-volume
            mountPath: /opt/bitnami/rabbitmq/conf
          - name: data
            mountPath: "/opt/bitnami/rabbitmq/var/lib/rabbitmq"
        ports:
        - name: epmd
          containerPort: 4369
        - name: amqp
          containerPort: 5672
        - name: dist
          containerPort: 25672
        - name: stats
          containerPort: 15672
        livenessProbe:
          exec:
            command:
              - sh
              - -c
              - rabbitmq-api-check "http://admin:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node" '{"status":"ok"}'
          initialDelaySeconds: 120
          timeoutSeconds: 20
          periodSeconds: 30
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - rabbitmq-health-check "http://admin:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node" '{"status":"ok"}'
          initialDelaySeconds: 10
          timeoutSeconds: 20
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: K8S_SERVICE_NAME
            value: "awx2-rabbitmq-headless"
          - name: K8S_ADDRESS_TYPE
            value: hostname
          - name: RABBITMQ_NODENAME
            value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
          - name: K8S_HOSTNAME_SUFFIX
            value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
          - name: RABBITMQ_LOGS
            value: "-"
          - name: RABBITMQ_ULIMIT_NOFILES
            value: "65536"
          - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
            value: +S 2:1
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: RABBITMQ_ERL_COOKIE
            valueFrom:
              secretKeyRef:
                name: awx2-rabbitmq
                key: rabbitmq-erlang-cookie
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: awx2-rabbitmq
                key: rabbitmq-password
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      volumes:
        - name: config-volume
          configMap:
            name: awx2-rabbitmq-config
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: rabbitmq
          release: "awx2"
          heritage: "Helm"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
            requests:
              storage: "8Gi"
---
# Source: awx/templates/migrate-job.yaml
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: awx2-db-migrate
#   labels:
#     app.kubernetes.io/name: awx
#     helm.sh/chart: awx-2.1.0
#     app.kubernetes.io/instance: awx2
#     app.kubernetes.io/managed-by: Helm
#   annotations:
#     "helm.sh/hook": post-upgrade
#     "helm.sh/hook-delete-policy": hook-succeeded
# spec:
#   activeDeadlineSeconds: 300
#   template:
#     name: db-migrate
#     spec:
#       restartPolicy: Never
#       initContainers:
#         - name: check-db-ready
#           image: "docker.io/bitnami/postgresql:9.6"
#           command:
#             - sh
#             - -c
#             - "until pg_isready -h awx2-postgresql -U awx -p 5432; do echo waiting for database; sleep 2; done;"
#       containers:
#         - name: awx-management
#           image: "ansible/awx_task:8.0.0"
#           command:
#             - "awx-manage"
#             - "migrate"
#             - "--noinput"
#           volumeMounts:
#             - mountPath: /etc/tower
#               name: awx2
#           env:
#             - name: DATABASE_USER
#               value: awx
#             - name: DATABASE_NAME
#               value: awx
#             - name: DATABASE_HOST
#               value: awx2-postgresql
#             - name: DATABASE_PORT
#               value: "5432"
#             - name: DATABASE_PASSWORD
#               value: pgpassword
#             - name: MEMCACHED_HOST
#               value: awx2-memcached
#             - name: RABBITMQ_HOST
#               value: awx2-rabbitmq
#           resources: {}
#       volumes:
#         - name: awx2
#           configMap:
#             name: awx2
#             items:
#               - key: settings.py
#                 path: settings.py
#               - key: secret_key
#                 path: SECRET_KEY

